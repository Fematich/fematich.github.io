<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Matthias Feys]]></title>
  <link href="http://Fematich.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Fematich.github.io/"/>
  <updated>2014-04-25T13:55:13+02:00</updated>
  <id>http://Fematich.github.io/</id>
  <author>
    <name><![CDATA[Matthias Feys]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Performance Tips]]></title>
    <link href="http://Fematich.github.io/blog/2014/04/23/python-performance-tips/"/>
    <updated>2014-04-23T22:54:35+02:00</updated>
    <id>http://Fematich.github.io/blog/2014/04/23/python-performance-tips</id>
    <content type="html"><![CDATA[<p>There are a lot of ways to gain massive speed improvements in Python. In this post I will list different resources to learn how to obtain these improvements (and to use Python for compute-intensive tasks).
If you have encountered other interesting talks, modules, websites, tips, please feel free to inform me.</p>

<h2>Python internals, general talks:</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=e08kOj2kISU">How to Speed up a Python Program 114,000 times(YouTube)</a></li>
<li><a href="https://www.youtube.com/watch?v=rXj5nayS7Yg">A Billion Rows per Second: Metaprogramming Python for Big Data (YouTube)</a></li>
<li><a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips">general Python performance tips (old page)</a></li>
<li><a href="http://pypy.org/performance.html">PyPy perfomance tips</a></li>
</ul>


<h2>Numpy basic tips:</h2>

<ul>
<li><a href="http://wiki.scipy.org/Tentative_NumPy_Tutorial">Numpy tutorial</a></li>
<li><a href="http://numba.pydata.org/">Numba</a>: this is a just-in-time specializing compiler which compiles annotated Python and NumPy code to LLVM (through decorators). Its goal is to seamlessly integrate with the Python scientific software stack and produce optimized native code, as well as integrate with native foreign languages. <a href="http://stackoverflow.com/questions/20428541/speeding-up-dynamic-programming-in-python-numpy">Example</a></li>
</ul>


<h2>GPU programming:</h2>

<ul>
<li><a href="http://documen.tician.de/pycuda/">PyCuda</a></li>
<li><a href="http://mathema.tician.de/software/pyopencl/">PyOpenCL</a></li>
<li><a href="http://deeplearning.net/software/theano/">Theano</a></li>
</ul>


<h2>Other numerical optimisation modules:</h2>

<p>There are optimized Python distributions available, containing multiple usefull scientific modules.</p>

<ul>
<li><a href="http://continuum.io/downloads">Anaconda</a></li>
<li><a href="https://www.enthought.com/products/canopy/">Canopy</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
